import numpy as np
import matplotlib.pyplot as plt
import glob

# Load all the data files generated by the Fortran program
data_files = sorted(glob.glob("wave_packet_*.dat"))

# Initialize a list to store the time steps and corresponding data
x_values = None
time_steps = []
probabilities = []

# Read data from each file
for file in data_files:
    data = np.loadtxt(file)
    if x_values is None:
        x_values = data[:, 0]  # First column is x
    probabilities.append(data[:, 1])  # Second column is probability
    time_steps.append(int(file.split('_')[-1].split('.')[0]))

# Convert to numpy arrays
probabilities = np.array(probabilities)
time_steps = np.array(time_steps)

# Potential barrier range (modify as per your simulation)
potential_min = -0.1  # Left edge of the barrier
potential_max = 0.1   # Right edge of the barrier

# Create an animated plot of probability density evolution
fig, ax = plt.subplots(figsize=(10, 6))
line, = ax.plot([], [], lw=2, label="Probability Density")

# Add a shaded region for the potential barrier
ax.fill_betweenx([0, probabilities.max() * 1.1], potential_min, potential_max, color='gray', alpha=0.3, label="Potential Barrier")

# Set axis limits
ax.set_xlim(x_values.min(), x_values.max())
ax.set_ylim(0, probabilities.max() * 1.1)
ax.set_xlabel("Position (x)")
ax.set_ylabel("Probability Density")
ax.set_title("Quantum Tunneling: Probability Density Evolution")
ax.legend()

# Update function for animation
def update(frame):
    line.set_data(x_values, probabilities[frame])
    ax.set_title(f"Quantum Tunneling: t = {time_steps[frame]} dt")
    return line,

# Generate and save the animation
from matplotlib.animation import FuncAnimation
ani = FuncAnimation(fig, update, frames=len(time_steps), blit=True)
ani.save("quantum_tunneling_simulation.gif", fps=30)

plt.show()
